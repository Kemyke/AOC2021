using System;
using System.Collections.Generic;
using System.Linq;

namespace Day06
{
    class Program
    {
        static IEnumerable<int> Step(IEnumerable<int> state) =>
            state.SelectMany(s => s > 0 ? new List<int> { s - 1 } : new List<int> { 6, 8 });

        static IEnumerable<(int, long)> Step2(IEnumerable<(int, long)> state) =>
            state.SelectMany(s => s.Item1 > 0 ? new List<(int, long)> { (s.Item1 - 1, s.Item2) } : new List<(int, long)> { (6, s.Item2), (8, s.Item2) })
                 .Aggregate(Enumerable.Range(0, 9).Select(r => (r, (long)0)), (acc, s) => acc.Where(a => a.r != s.Item1).Append((s.Item1, acc.Single(a => a.r == s.Item1).Item2 + s.Item2)));

        static void Main(string[] args)
        {
            var fishes = "5,1,5,3,2,2,3,1,1,4,2,4,1,2,1,4,1,1,5,3,5,1,5,3,1,2,4,4,1,1,3,1,1,3,1,1,5,1,5,4,5,4,5,1,3,2,4,3,5,3,5,4,3,1,4,3,1,1,1,4,5,1,1,1,2,1,2,1,1,4,1,4,1,1,3,3,2,2,4,2,1,1,5,3,1,3,1,1,4,3,3,3,1,5,2,3,1,3,1,5,2,2,1,2,1,1,1,3,4,1,1,1,5,4,1,1,1,4,4,2,1,5,4,3,1,2,5,1,1,1,1,2,1,5,5,1,1,1,1,3,1,4,1,3,1,5,1,1,1,5,5,1,4,5,4,5,4,3,3,1,3,1,1,5,5,5,5,1,2,5,4,1,1,1,2,2,1,3,1,1,2,4,2,2,2,1,1,2,2,1,5,2,1,1,2,1,3,1,3,2,2,4,3,1,2,4,5,2,1,4,5,4,2,1,1,1,5,4,1,1,4,1,4,3,1,2,5,2,4,1,1,5,1,5,4,1,1,4,1,1,5,5,1,5,4,2,5,2,5,4,1,1,4,1,2,4,1,2,2,2,1,1,1,5,5,1,2,5,1,3,4,1,1,1,1,5,3,4,1,1,2,1,1,3,5,5,2,3,5,1,1,1,5,4,3,4,2,2,1,3"
                .Split(",").Select(n => int.Parse(n));

            var part1 = Enumerable.Range(0, 80).Aggregate(fishes, (acc, t) => Step(acc)).Count();


            var fishes2 = "5,1,5,3,2,2,3,1,1,4,2,4,1,2,1,4,1,1,5,3,5,1,5,3,1,2,4,4,1,1,3,1,1,3,1,1,5,1,5,4,5,4,5,1,3,2,4,3,5,3,5,4,3,1,4,3,1,1,1,4,5,1,1,1,2,1,2,1,1,4,1,4,1,1,3,3,2,2,4,2,1,1,5,3,1,3,1,1,4,3,3,3,1,5,2,3,1,3,1,5,2,2,1,2,1,1,1,3,4,1,1,1,5,4,1,1,1,4,4,2,1,5,4,3,1,2,5,1,1,1,1,2,1,5,5,1,1,1,1,3,1,4,1,3,1,5,1,1,1,5,5,1,4,5,4,5,4,3,3,1,3,1,1,5,5,5,5,1,2,5,4,1,1,1,2,2,1,3,1,1,2,4,2,2,2,1,1,2,2,1,5,2,1,1,2,1,3,1,3,2,2,4,3,1,2,4,5,2,1,4,5,4,2,1,1,1,5,4,1,1,4,1,4,3,1,2,5,2,4,1,1,5,1,5,4,1,1,4,1,1,5,5,1,5,4,2,5,2,5,4,1,1,4,1,2,4,1,2,2,2,1,1,1,5,5,1,2,5,1,3,4,1,1,1,1,5,3,4,1,1,2,1,1,3,5,5,2,3,5,1,1,1,5,4,3,4,2,2,1,3"
                .Split(",").Select(n => int.Parse(n)).GroupBy(n => n).Select(g=> (g.Key, (long)g.Count()));

            var part2 = Enumerable.Range(0, 256).Aggregate(fishes2, (acc, t) => Step2(acc)).Select(f=>f.Item2).Sum();
        }
    }
}
